from selenium import webdriver
from selenium.common.exceptions import *
from selenium.webdriver.common.by import By
import subprocess
import os


def run_cmd(cmd):
    return subprocess.Popen(cmd,
                            shell=False,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE).communicate()


# net = 'xxx.xxx.xxx.0/24'
# protocol = 'https'

def query(net, protocol):
    print(
        "\n[*] Searching '{}' with '{}' protocol on shodan...\n".format(net, protocol))
    # cmd_code = ['shodan', 'search', '--fields', '_shodan.module,ip_str,port,ssl.cert.subject.CN,ssl.cert.subject.O,org',
    #             'net:{net} shodan.module:{protocol}'.format(net=net, protocol=protocol), '--separator', ':', '--limit', '1000']
    cmd_code = ['shodan', 'search', '--fields', '_shodan.module,ip_str,port,ssl.cert.subject.CN,ssl.cert.subject.O,org',
                'org:\'{net}\' shodan.module:{protocol}'.format(net=net, protocol=protocol), '--separator', ':', '--limit', '1000']
    std_out_and_err = run_cmd(cmd_code)

    q_results = str(std_out_and_err[0],
                    encoding='utf-8').replace('\r\r\n', '\n')
    error = str(std_out_and_err[1], encoding='utf-8')

    if error == '':
        return q_results
    else:
        print('[-] ' + error)
        raise BaseException('No search results found')


def screen(results, keyword):
    profile = webdriver.FirefoxProfile()
    profile.accept_untrusted_certs = True
    browser = webdriver.Firefox(firefox_profile=profile)
    browser.implicitly_wait(10)
    for url, path in zip(results.get_url(keyword=keyword), results.get_dir()):
        if url == '':
            continue
        try:
            browser.set_window_size(1024, 768)
            browser.get(url)
            try:
                # redirct_url = browser.find_element_by_xpath(
                #     '//meta').get_attribute('outerHTML').split('url=')[1].rstrip('">')
                redirct_url = browser.find_element_by_xpath(
                    '//meta').get_attribute('content').lower().split('url=')[1]
            except Exception as e_:
                redirct_url = ''
            if redirct_url != '':
                redirct_url = redirct_url.strip("'") if redirct_url.startswith('http') else (
                    url + '/' + redirct_url)
                print(f"[*] Page redirct to: '{redirct_url}', following...")
                browser.get(redirct_url)
            file_name = url.split(
                '//')[1].replace(':', '_') + f".{url.split('//')[0]}" + '.png'
            mkdirs(path)
            browser.save_screenshot(
                path + file_name)
            print(f'[+] Save file {file_name} successfully.')
        except WebDriverException as e_fail:
            print(e_fail)
            print('[-] Open ' + url + ' fail!')
        except Exception as e_other:
            print(e_other)
    browser.close()


def mkdirs(path):
    try:
        os.makedirs(path)
    except OSError as e:
        print(e)
        pass
    else:
        print(f"[*] Path '{path}' doesn't exist, will be created")


class Result_Data:
    def __init__(self, result_list):
        self.lines = []
        for line in result_list.split('\n'):
            if len(line.split(':')) > 4:
                self.lines.append(line.split(':'))

    def get_url(self, keyword=''):
        for line in self.lines:
            if line[0] == 'https':
                if keyword.lower() in line[5].lower():
                    yield line[0] + '://' + line[1] + ':' + line[2]
            else:
                yield line[0] + '://' + line[1] + ':' + line[2]
        yield ''

    def get_dir(self):
        for line in self.lines:
            net = './'
            net += line[5].replace(' ', '_') + '/'
            net += line[1][::-1].split('.', 1)[1][::-1]
            net += '.%/'
            yield net

    def get_cname(self):
        for line in self.lines:
            yield line[3]

    def get_org(self):
        for line in self.lines:
            yield line[4]

    def print_out(self):
        for line in self.lines:
            if len(line) > 4:
                print(
                    '    Url: {0}://{1}:{2:6}\tCNAME: {3:40}\tCert: {4:20}\tOrg: {5}'.format(line[0], line[1], line[2], line[3], line[4], line[5]))


def main():
    net = input('The net you wanna search:')
    protocol = input('With protocol:')
    keyword = input('With keyword:')
    q_results = query(net, protocol)
    results = Result_Data(q_results)
    results.print_out()
    screen(results, keyword)


if __name__ == '__main__':
    main()
